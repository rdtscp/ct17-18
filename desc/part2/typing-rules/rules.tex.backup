\documentclass[a4paper]{article}


\usepackage[margin=2cm]{geometry}

\usepackage{mathpartir}

\title{\vspace{-2ex}Typing rules for MiniC\vspace{-2ex}}
\date{}

\begin{document}
\maketitle
\thispagestyle{empty}  % removes page number
 

 
  
\section{Declarations}
 
 
\begin{mathpar}
\inferrule*[left=VarDecl(\textup{v})]{
\textbf{T} \notin \{\textbf{void}\}
}{add\ \langle v : \textbf{T}\rangle\ to\ \Gamma}
\end{mathpar}

\begin{mathpar}
\inferrule*[left=FunDecl(\textup{f})]{\ }{add\ \langle f: \overline{U} \rightarrow \textbf{T} \rangle\ to\ \Gamma}
\end{mathpar}



\section{Expressions}

% Literals
\begin{mathpar}
\inferrule*[left=IntLiteral(\textup{i})]{\ }{\Gamma \vdash i : \textbf{int}}
\and
\inferrule*[left=StrLiteral(\textup{s})]{\ }{\Gamma \vdash s : \textbf{char[s.length+1]}}
\and
\inferrule*[left=ChrLiteral(\textup{c})]{\ }{\Gamma \vdash c : \textbf{char}}
\end{mathpar}

% VarExpr
\begin{mathpar}
  \inferrule*[left=VarExpr]{\vdash \langle VarExpr : \textbf{T}\rangle \in \Gamma}{\Gamma \vdash VarExpr : \textbf{T}}
\end{mathpar}

% FunCallExpr
\begin{mathpar}
\inferrule*[left=FunCallExpr(\textup{f})]{
%
\vdash \langle f: \overline{U} \rightarrow \textbf{T} \rangle \in \Gamma
\and
\Gamma \vdash \overline{Var} : \overline{U}
%
}{\Gamma \vdash f(\overline{Var}) : \textbf{T}}
\end{mathpar}


% int BinOp
 \begin{mathpar}
\inferrule*[left={BinOp(Op=ADD,SUB,MUL,DIV,MOD,OR,AND)}]{\Gamma \vdash Expr_1 : \textbf{int} \\ \vdash Expr_2 : \textbf{int}}{\Gamma \vdash Expr_1\ Op\ Expr_2 : \textbf{int}}
\end{mathpar}

% other BinOp
 \begin{mathpar}
\inferrule*[left={BinOp(Op=GT,LT,GE,LE,NE,EQ)}]{\Gamma \vdash Expr_1 : \textbf{T} \\ \vdash Expr_2 : \textbf{T}}{\Gamma \vdash Expr_1\ Op\ Expr_2 : \textbf{int}}
\end{mathpar}


% ArrayAccessExpr
\begin{mathpar}
\inferrule*[left={ArrayAccessExpr}]{\Gamma \vdash Expr_1 :  : \textbf{int}}{\Gamma \vdash Expr_1[Expr_2] : \textbf{elemType} }
\end{mathpar}

% \begin{mathpar}
% \inferrule*[left={ArrayAccessExpr}]{\Gamma \vdash Expr_1 : \textbf{AT} \in \{ArrrayType_elemType,PointerType_elemType} \\ \vdash Expr_2 : \textbf{int}}{\Gamma \vdash Expr_1[Expr_2] : \textbf{elemType} }
% \end{mathpar}

% FieldAccessExpr
\begin{mathpar}
\inferrule*[left={FieldAccessExpr(\textup{fieldName})}]{\Gamma \vdash Expr : \textbf{StructType}_{fieldName : \textbf{T}}}{\Gamma \vdash Expr.fieldName : \textbf{T} }
\end{mathpar}

% ValueAtExpr
\begin{mathpar}
\inferrule*[left={ValueAtExpr}]{\Gamma \vdash Expr : \textbf{PointerType}_\textbf{elemType}}{\Gamma \vdash *Expr : \textbf{elemType} }
\end{mathpar}

% SizeOfExpr
\begin{mathpar}
\inferrule*[left={SizeOf(\textup{t})}]{\ }{\Gamma \vdash \ sizeof(t) : \textbf{int} }
\end{mathpar}

% TypeCastExpr
\begin{mathpar}
\inferrule*[left={TypeCastExpr(char to int)}]{Expr : \textbf{char}}{\Gamma \vdash \ (\textbf{int})Expr : \textbf{int} }
\end{mathpar}


\begin{mathpar}
\inferrule*[left={TypeCastExpr(array to pointer)}]{Expr : \textbf{ArrayType}_\textbf{elemType}}{\Gamma \vdash \ (\textbf{*elemType})Expr : \textbf{PointerType}_\textbf{elemType} }
\end{mathpar}


\section{Statements}


\begin{mathpar}
\inferrule*[left={While}]{\Gamma \vdash Expr : \textbf{int}}{\Gamma \vdash while(Expr)\ Stmt}
\end{mathpar}

\begin{mathpar}
\inferrule*[left={If(no else)}]{\Gamma \vdash Expr : \textbf{int}}{\Gamma \vdash if(Expr)\ Stmt}
\and
\inferrule*[left={If(with else)}]{\Gamma \vdash Expr : \textbf{int}}{\Gamma \vdash if(Expr)\ Stmt_1\ else\ Stmt_2}
\end{mathpar}


\begin{mathpar}
\inferrule*[left=Assign]{\Gamma \vdash Var : \textbf{T} \\ \Gamma \vdash Expr : \textbf{T}}{\Gamma \vdash Var = Expr}
\end{mathpar}

\begin{mathpar}
\inferrule*[left=Return(from function \textup{f})]{\Gamma \vdash f: \overline{U} \rightarrow \textbf{T} \\ \Gamma \vdash Expr : \textbf{T}}{\Gamma \vdash return\ Expr}
\end{mathpar}
 
\end{document}
