# #  comment
# () grouping
# [] optional
# *  zero or more
# +  one or more
# |  alternative


program -> (include)* (stctdec)* (vardecl)* (fundecl)* EOF

include -> INCLUDE STRING_LITERAL

stctdec -> stctype LBRA (vardecl)+ RBRA SC

vardecl -> type IDENT SC
        -> type IDENT LSBR INT_LITERAL RSBR SC

fundecl -> type IDENT LPAR params RPAR LBRA (vardecl)* (stmt)* RBRA

type    -> ( INT | CHAR | VOID | stctype) [ASTERIX]
stctype -> STRUCT IDENT

params  -> [ type IDENT (COMMA type IDENT)* ]

stmt    -> LBRA (vardecl)* (stmt)* RBRA
        -> WHILE LPAR exp RPAR stmt
        -> IF LPAR exp RPAR stmt [ELSE stmt]
        -> RETURN [exp] SC
        -> exp ASSIGN exp SC
        -> exp SC

exp     -> exp OR exp
        -> exp2

exp2    -> exp AND exp
        -> exp3

exp3    -> exp EQ exp
        -> exp NE exp
        -> exp4

exp4    -> exp LT exp
        -> exp LE exp
        -> exp GT exp
        -> exp GE exp
        -> exp5

exp5    -> exp PLUS exp
        -> exp MINUS exp
        -> exp6

exp6    -> exp ASTERIX exp
        -> exp DIV exp
        -> exp REM exp
        -> exp7

exp7    -> MINUS exp
        -> LPAR type RPAR exp
        -> ASTERIX exp
        -> SIZEOF LPAR type RPAR
        -> exp8

exp8    -> IDENT [pIdent]
        -> INT_LITERAL
        -> CHAR_LITERAL
        -> STRING_LITERAL
        -> LPAR exp RPAR

pIdent  -> LPAR [ exp (COMMA exp)* ] RPAR
        -> LSBR exp RSBR
        -> DOT IDENT

/************************************************************\
                          OLD EXP GRAMMAR
\************************************************************/


exp     -> LPAR ( type RPAR exp | exp RPAR ) [postexp] 
        -> CHAR_LITERAL [postexp] 
        -> STRING_LITERAL [postexp]
        -> IDENT [postexp] 
        -> IDENT LPAR [ exp (COMMA exp)* ] RPAR [postexp] 
        -> INT_LITERAL [postexp] 
        -> MINUS exp [postexp] 
        -> ASTERIX exp [postexp] 
        -> SIZEOF LPAR type RPAR [postexp]

postexp -> (LSBR exp RSBR | DOT IDENT | op exp) [postexp]

op      -> ( MINUS | ASTERIX | GT | LT | GE | LE | NE | EQ | PLUS | DIV | REM | OR | AND )